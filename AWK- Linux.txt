AWK is a powerful text-processing tool in Linux that allows you to manipulate and analyze text data. It's particularly useful for working with structured data, such as columns in a CSV file or fields in log files. AWK operates on a line-by-line basis, making it well-suited for processing and extracting information from text files. Here's a brief overview of AWK along with an example:

### Basic AWK Structure

AWK programs consist of patterns and actions. It scans input data line by line, and when a line matches a pattern, it performs the associated action. Here's the basic syntax:


awk 'pattern { action }' input_file


- `pattern`: Specifies a condition that, when met, triggers the action.
- `action`: Specifies what to do when the pattern is met.

example 1:
----------------

1.ps -A
to check all processers

2.ps -A | awk '{print $1}'


EXAMPLE 2
---------------

3. ps -A |awk '{print $0}'

example 3
--------
 cat /etc/passwd
 
 awk -F ":" '{print $1}' /etc/passwd
 
 for multiple columns
 
awk -F ":" '{print $1 $2 $3}' /etc/passwd

giving tabs
awk -F ":" '{print $1"\t" $2 "\t" $3"\t"}' /etc/passwd

example 4

awk 'BEGIN { for (i=1; i<=10; i++) print "The square root of ",i,"is",i-i;}'


example 5
---------------
from csv files

awk -F ";" '{print $1}' countrycode.csv


example 6

awk -F ";" '{print $1 "\t" $2}' countrycode.csv

### Example: Using AWK to Process a CSV File

Let's say you have a CSV file called "data.csv" with the following content:


Name,Age,Location
Alice,25,New York
Bob,30,Los Angeles
Charlie,22,Chicago


#### Example 1: Print all lines

To print all lines from "data.csv," you can use AWK without specifying a pattern, which defaults to always being true:


awk '{ print }' data.csv


This will print the entire file as it is.

#### Example 2: Extract and print specific fields

If you want to extract and print only the "Name" and "Location" columns, you can specify the fields as follows:


awk -F',' '{ print $1, $3 }' data.csv


- `-F','` specifies that the input field separator is a comma.
- `'{ print $1, $3 }'` prints the first and third fields.

The output will be:


Name Location
Alice New York
Bob Los Angeles
Charlie Chicago


#### Example 3: Filter and print specific lines

If you want to print only lines where the "Age" is greater than 25, you can add a pattern and action:


awk -F',' '$2 > 25 { print }' data.csv


- `$2` refers to the second field, which is "Age."
- `$2 > 25` is the pattern, which checks if the "Age" is greater than 25.

The output will be:


Bob,30,Los Angeles


These are just a few basic examples of what you can do with AWK. It's a versatile tool for text processing, and you can create more complex programs to suit your specific needs. AWK has built-in variables, functions, and control structures that make it capable of handling a wide range of text-processing tasks.